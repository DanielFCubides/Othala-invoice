// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	products "othala/app/products"

	mock "github.com/stretchr/testify/mock"
)

// ProductManager is an autogenerated mock type for the ProductManager type
type ProductManager struct {
	mock.Mock
}

// Create provides a mock function with given fields: product
func (_m *ProductManager) Create(product products.Product) (products.Product, error) {
	ret := _m.Called(product)

	var r0 products.Product
	if rf, ok := ret.Get(0).(func(products.Product) products.Product); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(products.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(products.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: productId
func (_m *ProductManager) Delete(productId string) (products.Product, error) {
	ret := _m.Called(productId)

	var r0 products.Product
	if rf, ok := ret.Get(0).(func(string) products.Product); ok {
		r0 = rf(productId)
	} else {
		r0 = ret.Get(0).(products.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *ProductManager) GetAll() ([]products.Product, error) {
	ret := _m.Called()

	var r0 []products.Product
	if rf, ok := ret.Get(0).(func() []products.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: productId
func (_m *ProductManager) GetById(productId string) (products.Product, error) {
	ret := _m.Called(productId)

	var r0 products.Product
	if rf, ok := ret.Get(0).(func(string) products.Product); ok {
		r0 = rf(productId)
	} else {
		r0 = ret.Get(0).(products.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: product
func (_m *ProductManager) Update(product products.Product) (products.Product, error) {
	ret := _m.Called(product)

	var r0 products.Product
	if rf, ok := ret.Get(0).(func(products.Product) products.Product); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(products.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(products.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
