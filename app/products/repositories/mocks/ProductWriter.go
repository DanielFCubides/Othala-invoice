// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	products "othala/app/products"

	mock "github.com/stretchr/testify/mock"
)

// ProductWriter is an autogenerated mock type for the ProductWriter type
type ProductWriter struct {
	mock.Mock
}

// Create provides a mock function with given fields: product
func (_m *ProductWriter) Create(product products.Product) (*products.Product, error) {
	ret := _m.Called(product)

	var r0 *products.Product
	if rf, ok := ret.Get(0).(func(products.Product) *products.Product); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(products.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBatch provides a mock function with given fields: _a0
func (_m *ProductWriter) CreateBatch(_a0 []products.Product) (*products.Product, error) {
	ret := _m.Called(_a0)

	var r0 *products.Product
	if rf, ok := ret.Get(0).(func([]products.Product) *products.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]products.Product) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: product
func (_m *ProductWriter) Delete(product products.Product) (*products.Product, error) {
	ret := _m.Called(product)

	var r0 *products.Product
	if rf, ok := ret.Get(0).(func(products.Product) *products.Product); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(products.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: product
func (_m *ProductWriter) Update(product products.Product) (*products.Product, error) {
	ret := _m.Called(product)

	var r0 *products.Product
	if rf, ok := ret.Get(0).(func(products.Product) *products.Product); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(products.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
